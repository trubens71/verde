
% *** verde rule04 (colour schemes and mark colours) ***

% field to colour properties (facts)
{% for field, mark_colour in field_mark_colour.items() -%}
fieldmarkcolor("{{field}}","{\"color\": \"{{mark_colour}}\"}").
{% endfor %}
{% for field, colour_scheme in field_colour_scheme.items() -%}
fieldcolorscheme("{{field}}", "{\"scheme\": \"{{colour_scheme}}\"}").
{% endfor %}
% rule definitions
% first case: color channel is used and we have a scheme for the encoding field.
verde_color_enc_scheme(V,E,F,T,CS) :- fieldcolorscheme(F,CS), field(V,E,F), type(V,E,T), channel(V,E,color).

% second case: if first case not applied, and we have non-aggregated field encoding for which there is a schema,
% then we will double encode that field.
verde_color_double_enc_scheme_choices(V,E,F,T,CS) :- not verde_color_enc_scheme(_,_,_,_),
                                                     field(V,E,F), type(V,E,T),
                                                     not aggregate(V,E,_),
                                                     discrete(V,E), fieldcolorscheme(F,CS).

% choose only one
1 { verde_color_double_enc_scheme(V,E,F,T,CS): verde_color_double_enc_scheme_choices(V,E,F,T,CS) } 1 :-
    verde_color_double_enc_scheme_choices(_,_,_,_,_).

% third case: if first two cases does not apply but we have an appropriate mark color
verde_mark_color_choices(V,CO) :- not verde_color_enc_scheme(_,_,_,_),
                                  not verde_color_double_enc_scheme(_,_,_,_),
                                  view(V), fieldmarkcolor(F,CO),
                                  fieldtype(F,FT), FT != "number",
                                  cardinality(F,CA), num_rows(NR), CA = NR.
% choose only one mark colour because chance of one-to-many node mappings
1 { verde_color_mark(V,CO): verde_mark_color_choices(V,CO)} 1 :- verde_mark_color_choices(_,_).

% outputs for translation to vl spec properties
#show verde_color_enc_scheme/5.
#show verde_color_double_enc_scheme/5.
#show verde_color_mark/2.

% set these as zero weight soft rules, helps in the comparative analysis v baseline
soft(verde_color_enc_scheme,V,E) :- verde_color_enc_scheme(V,E,F,CS).
soft(verde_color_double_enc_scheme,V,E) :- verde_color_double_enc_scheme(V,E,F,CS).
soft(verde_color_mark,V,CO) :- verde_color_mark(V,CO).

#const verde_color_enc_scheme_weight = 0.
#const verde_color_double_enc_scheme_weight = 0.
#const verde_color_mark_weight = 0.

soft_weight(verde_color_enc_scheme, verde_color_enc_scheme_weight).
soft_weight(verde_color_double_enc_scheme, verde_color_double_enc_scheme_weight).
soft_weight(verde_color_mark, verde_color_mark_weight).

% *** end of verde rule04 lp ***
